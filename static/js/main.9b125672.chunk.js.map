{"version":3,"sources":["shared/firebase.js","components/Course/times.js","components/Course/Course.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","terms","F","W","S","days","getCourseTerm","course","id","charAt","timeConflict","course1","course2","days1","days2","some","day","includes","hours1","hours","hours2","Math","max","start","min","end","hasConflict","selected","selection","db","database","ref","meetsPat","moveCourse","meets","prompt","exec","match","hh1","mm1","hh2","mm2","timeParts","child","update","catch","error","alert","saveCourse","Course","state","user","color","onClick","toggle","onDoubleClick","disabled","slice","getCourseNumber","title","TermSelector","Group","hasAddons","Object","values","map","value","key","term","setTerm","CourseList","courses","useState","setSelected","x","filter","y","concat","useSelection","termCourses","Fragment","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","callbacks","signInSuccessWithAuthResult","Welcome","Header","displayName","primary","signOut","SignIn","firebaseAuth","Banner","addCourseTimes","App","schedule","setSchedule","setUser","useEffect","handleData","snap","val","addScheduleTimes","on","off","onAuthStateChanged","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9b125672.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAXeonrSIS68-BLTMKScQNXUSJUqAszr7I\",\r\n    authDomain: \"cs-course-scheduler-da8a9.firebaseapp.com\",\r\n    databaseURL: \"https://cs-course-scheduler-da8a9.firebaseio.com\",\r\n    projectId: \"cs-course-scheduler-da8a9\",\r\n    storageBucket: \"cs-course-scheduler-da8a9.appspot.com\",\r\n    messagingSenderId: \"514173636909\",\r\n    appId: \"1:514173636909:web:f55551a73c44dedfb683a4\"\r\n  };  \r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase\r\n","const terms = { F: \"Fall\", W: \"Winter\", S: \"Spring\" };\r\nconst days = [\"M\", \"Tu\", \"W\", \"Th\", \"F\"];\r\n\r\nconst getCourseNumber = course => course.id.slice(1, 4);\r\n\r\nconst getCourseTerm = course => terms[course.id.charAt(0)];\r\n\r\n// a conflict must involve overlapping days and times\r\n\r\nconst daysOverlap = (days1, days2) =>\r\n  days.some(day => days1.includes(day) && days2.includes(day));\r\n\r\nconst hoursOverlap = (hours1, hours2) =>\r\n  Math.max(hours1.start, hours2.start) < Math.min(hours1.end, hours2.end);\r\n\r\nconst timeConflict = (course1, course2) =>\r\n  daysOverlap(course1.days, course2.days) &&\r\n  hoursOverlap(course1.hours, course2.hours);\r\n\r\nconst courseConflict = (course1, course2) =>\r\n  course1 !== course2 &&\r\n  getCourseTerm(course1) === getCourseTerm(course2) &&\r\n  timeConflict(course1, course2);\r\n\r\nconst hasConflict = (course, selected) =>\r\n  selected.some(selection => courseConflict(course, selection));\r\n\r\nexport { getCourseNumber, getCourseTerm, hasConflict };","import React from \"react\";\r\nimport \"rbx/index.css\";\r\nimport { Button } from \"rbx\";\r\nimport { getCourseNumber, getCourseTerm, hasConflict } from './times';\r\nimport firebase from \"../../shared/firebase\"\r\n\r\nconst db = firebase.database().ref();\r\nconst meetsPat = /^ *((?:M|Tu|W|Th|F)+) +(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d) *$/;\r\n\r\nconst buttonColor = selected => (\r\n  selected ? 'success' : null\r\n)\r\n\r\nconst timeParts = meets => {\r\n  const [match, days, hh1, mm1, hh2, mm2] = meetsPat.exec(meets) || [];\r\n  return !match ? {} : {\r\n    days,\r\n    hours: {\r\n      start: hh1 * 60 + mm1 * 1,\r\n      end: hh2 * 60 + mm2 * 1\r\n    }\r\n  };\r\n};\r\n\r\nconst saveCourse = (course, meets) => {\r\n  db.child('courses').child(course.id).update({meets})\r\n    .catch(error => alert(error));\r\n};\r\n\r\nconst moveCourse = course => {\r\n  const meets = prompt('Enter new meeting data, in this format:', course.meets);\r\n  if (!meets) return;\r\n  const {days} = timeParts(meets);\r\n  if (days) saveCourse(course, meets); \r\n  else moveCourse(course);\r\n};\r\n\r\nconst Course = ({ course, state, user }) => (\r\n  <Button color={ buttonColor(state.selected.includes(course)) }\r\n    onClick={ () => state.toggle(course) }\r\n    onDoubleClick={ user ? () => moveCourse(course) : null }\r\n    disabled={ hasConflict(course, state.selected) }\r\n    >\r\n    { getCourseTerm(course) } CS { getCourseNumber(course) }: { course.title }\r\n  </Button>\r\n);\r\n\r\n\r\nexport default Course","import React, { useState, } from 'react';\r\nimport \"rbx/index.css\";\r\nimport { Button } from \"rbx\";\r\nimport Course from \"./Course\"\r\n\r\nconst terms = { F: 'Fall', W: 'Winter', S: 'Spring'};\r\n\r\nconst buttonColor = selected => (\r\n  selected ? 'success' : null\r\n)\r\n\r\nconst getCourseTerm = course => (\r\n  terms[course.id.charAt(0)]\r\n);\r\nconst TermSelector = ({ state }) => (\r\n  <Button.Group hasAddons>\r\n    { Object.values(terms)\r\n        .map(value => \r\n          <Button key={value}\r\n            color={ buttonColor(value === state.term) }\r\n            onClick={ () => state.setTerm(value) }\r\n            >\r\n            { value }\r\n          </Button>\r\n        )\r\n    }\r\n  </Button.Group>\r\n);\r\n\r\nconst useSelection = () => {\r\n  const [selected, setSelected] = useState([]);\r\n  const toggle = (x) => {\r\n    setSelected(selected.includes(x) ? selected.filter(y => y !== x) : [x].concat(selected))\r\n  };\r\n  return [ selected, toggle ];\r\n};\r\n\r\nconst CourseList = ({ courses, user }) => {\r\n  const [term, setTerm] = useState('Fall');\r\n  const [selected, toggle] = useSelection();\r\n  const termCourses = courses.filter(course => term === getCourseTerm(course));\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <TermSelector state={ { term, setTerm } } />\r\n      <Button.Group>\r\n        { termCourses.map(course =>\r\n           <Course key={ course.id } course={ course }\r\n             state={ { selected, toggle } }\r\n             user={ user } />) }\r\n      </Button.Group>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CourseList;","import React, { useState, useEffect} from 'react';\nimport \"rbx/index.css\";\nimport { Button, Container, Message, Title } from \"rbx\";\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport firebase from \"./shared/firebase\"\nimport CourseList from \"./components/CourseList\"\n\nconst meetsPat = /^ *((?:M|Tu|W|Th|F)+) +(\\d\\d?):(\\d\\d) *[ -] *(\\d\\d?):(\\d\\d) *$/;\n\nconst db = firebase.database().ref();\n\n// AUTH UI\nconst uiConfig = {\n  signInFlow: 'popup',\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID\n  ],\n  callbacks: {\n    signInSuccessWithAuthResult: () => false\n  }\n};\n\nconst Welcome = ({ user }) => (\n  <Message color=\"info\">\n    <Message.Header>\n      Welcome, {user.displayName}\n      <Button primary onClick={() => firebase.auth().signOut()}>\n        Log out\n      </Button>\n    </Message.Header>\n  </Message>\n);\n\nconst SignIn = () => (\n  <StyledFirebaseAuth\n    uiConfig={uiConfig}\n    firebaseAuth={firebase.auth()}\n  />\n);\n\nconst Banner = ({ user, title }) => (\n  <React.Fragment>\n    { user ? <Welcome user={ user } /> : <SignIn /> }\n    <Title>{ title || '[loading...]' }</Title>\n  </React.Fragment>\n);\n\nconst timeParts = meets => {\n  const [match, days, hh1, mm1, hh2, mm2] = meetsPat.exec(meets) || [];\n  return !match ? {} : {\n    days,\n    hours: {\n      start: hh1 * 60 + mm1 * 1,\n      end: hh2 * 60 + mm2 * 1\n    }\n  };\n};\n\nconst addCourseTimes = course => ({\n  ...course,\n  ...timeParts(course.meets)\n});\n\nconst addScheduleTimes = schedule => ({\n  title: schedule.title,\n  courses: Object.values(schedule.courses).map(addCourseTimes)\n});\n\nconst App = () => {\n  const [schedule, setSchedule] = useState({ title: '', courses: [] });\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const handleData = snap => {\n      if (snap.val()) setSchedule(addScheduleTimes(snap.val()));\n    };\n    db.on('value', handleData, error => alert(error));\n    return () => { db.off('value', handleData); };\n  }, []);\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(setUser);\n  }, []);\n\nreturn (\n    <Container>\n      <Banner title={ schedule.title } user={ user } />\n      <CourseList courses={ schedule.courses } user={ user } />\n    </Container>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}